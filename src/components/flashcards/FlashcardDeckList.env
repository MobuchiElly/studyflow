// import React from 'react';
// import { FlashcardDeck } from '@/types/flashcard';
// import FlashcardDeckCard from './FlashcardDeckCard';
// import { useRouter } from 'next/navigation';

// interface FlashcardDeckListProps {
//   flashcardDecks: FlashcardDeck[];
//   onEdit: (deck: FlashcardDeck) => void;
//   onDelete: (deckId: string) => void;
//   isLoading: boolean;
// }

// const FlashcardDeckList: React.FC<FlashcardDeckListProps> = ({
//   flashcardDecks,
//   onEdit,
//   onDelete,
//   isLoading,
// }) => {
//   const router = useRouter(); // Initialize useRouter

//   if (isLoading) {
//     return (
//       <div className="flex justify-center items-center h-64">
//         <Loader2 className="h-8 w-8 animate-spin text-primary" />
//       </div>
//     );
//   }

//   if (flashcardDecks.length === 0) {
//     return (
//       <div className="text-center py-10 text-gray-500">
//         No flashcard decks found. Create one to get started!
//       </div>
//     );
//   }

//   return (
//     <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
//       {flashcardDecks.map((deck) => (
//         <Card
//           key={deck.id}
//           className="flex flex-col justify-between hover:shadow-lg transition-shadow duration-200 ease-in-out cursor-pointer"
//           onClick={() => router.push(`/dashboard/flashcards/${deck.id}`)} // Add navigation here
//         >
//           <CardHeader>
//             <CardTitle>{deck.title}</CardTitle>
//             <CardDescription className="line-clamp-2">
//               {deck.description || 'No description provided.'}
//             </CardDescription>
//           </CardHeader>
//           <CardContent>
//             <p className="text-sm text-gray-500">
//               {deck.flashcards ? deck.flashcards.length : 0} Flashcards
//             </p>
//           </CardContent>
//           <CardFooter className="flex justify-end gap-2">
//             <Button variant="outline" size="sm" onClick={(e) => {
//               e.stopPropagation(); // Prevent card click from triggering
//               onEdit(deck);
//             }}>
//               Edit
//             </Button>
//             <Button variant="destructive" size="sm" onClick={(e) => {
//               e.stopPropagation(); // Prevent card click from triggering
//               onDelete(deck.id);
//             }}>
//               Delete
//             </Button>
//           </CardFooter>
//         </Card>
//       ))}
//     </div>
//   );
// };

// export default FlashcardDeckList;