// import React, { useState, useEffect } from 'react';
// import {
//   Dialog,
//   DialogContent,
//   DialogHeader,
//   DialogTitle,
//   DialogFooter,
// } from '@/components/ui/dialog';
// import { Button } from '@/components/ui/button';
// import { Input } from '@/components/ui/input';
// import { Label } from '@/components/ui/label';
// import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
// import { QuizQuestion } from '@/types/quiz';
// import { toast } from 'sonner';

// interface EditQuizQuestionModalProps {
//   isOpen: boolean;
//   onClose: () => void;
//   onSave: (question: QuizQuestion) => void;
//   questionToEdit: QuizQuestion | null;
//   quizId: string;
// }

// const EditQuizQuestionModal: React.FC<EditQuizQuestionModalProps> = ({
//   isOpen,
//   onClose,
//   onSave,
//   questionToEdit,
//   quizId,
// }) => {
//   const [questionText, setQuestionText] = useState('');
//   const [options, setOptions] = useState<string[]>(['', '', '', '']);
//   const [correctAnswerIndex, setCorrectAnswerIndex] = useState<string>('0');
//   const [isLoading, setIsLoading] = useState(false);

//   useEffect(() => {
//     if (questionToEdit) {
//       setQuestionText(questionToEdit.question_text);
//       setOptions(questionToEdit.options);
//       setCorrectAnswerIndex(questionToEdit.correct_answer_index.toString());
//     } else {
//       // Reset form when modal opens without a question to edit (e.g., after creation)
//       setQuestionText('');
//       setOptions(['', '', '', '']);
//       setCorrectAnswerIndex('0');
//     }
//   }, [questionToEdit, isOpen]);

//   const handleOptionChange = (index: number, value: string) => {
//     const newOptions = [...options];
//     newOptions[index] = value;
//     setOptions(newOptions);
//   };

//   const validateForm = () => {
//     if (!questionText.trim()) {
//       toast.error('Question text cannot be empty.');
//       return false;
//     }
//     if (options.some(option => !option.trim())) {
//       toast.error('All options must be filled.');
//       return false;
//     }
//     return true;
//   };

//   const handleSave = async () => {
//     if (!validateForm()) return;

//     if (!questionToEdit) {
//       toast.error('No question selected for editing.');
//       return;
//     }

//     setIsLoading(true);
//     try {
//       const updatedQuestion: QuizQuestion = {
//         ...questionToEdit,
//         question_text: questionText,
//         options: options,
//         correct_answer_index: parseInt(correctAnswerIndex),
//         updated_at: new Date().toISOString(),
//       };
//       onSave(updatedQuestion);
//       toast.success('Quiz question updated successfully!');
//       onClose();
//     } catch (error) {
//       console.error('Failed to update quiz question:', error);
//       toast.error('Failed to update quiz question.');
//     } finally {
//       setIsLoading(false);
//     }
//   };

//   return (
//     <Dialog open={isOpen} onOpenChange={onClose}>
//       <DialogContent className="sm:max-w-[600px]">
//         <DialogHeader>
//           <DialogTitle>Edit Quiz Question</DialogTitle>
//         </DialogHeader>
//         <div className="grid gap-4 py-4">
//           <div className="grid grid-cols-4 items-center gap-4">
//             <Label htmlFor="questionText" className="text-right">
//               Question
//             </Label>
//             <Input
//               id="questionText"
//               value={questionText}
//               onChange={(e) => setQuestionText(e.target.value)}
//               className="col-span-3"
//               placeholder="Enter your question here"
//             />
//           </div>
//           <div className="grid grid-cols-4 items-center gap-4">
//             <Label className="text-right">Options</Label>
//             <div className="col-span-3 space-y-2">
//               {options.map((option, index) => (
//                 <Input
//                   key={index}
//                   value={option}
//                   onChange={(e) => handleOptionChange(index, e.target.value)}
//                   placeholder={`Option ${index + 1}`}
//                 />
//               ))}
//             </div>
//           </div>
//           <div className="grid grid-cols-4 items-center gap-4">
//             <Label className="text-right">Correct Answer</Label>
//             <RadioGroup
//               value={correctAnswerIndex}
//               onValueChange={setCorrectAnswerIndex}
//               className="col-span-3 flex flex-col space-y-1"
//             >
//               {options.map((option, index) => (
//                 <div key={index} className="flex items-center space-x-2">
//                   <RadioGroupItem value={index.toString()} id={`option-${index}`} />
//                   <Label htmlFor={`option-${index}`}>{option || `Option ${index + 1}`}</Label>
//                 </div>
//               ))}
//             </RadioGroup>
//           </div>
//         </div>
//         <DialogFooter>
//           <Button variant="outline" onClick={onClose} disabled={isLoading}>
//             Cancel
//           </Button>
//           <Button onClick={handleSave} disabled={isLoading}>
//             {isLoading ? 'Saving...' : 'Save Changes'}
//           </Button>
//         </DialogFooter>
//       </DialogContent>
//     </Dialog>
//   );
// };

// export default EditQuizQuestionModal;