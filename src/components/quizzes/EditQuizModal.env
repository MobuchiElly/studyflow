// import React, { useState, useEffect } from 'react';
// import {
//   Dialog,
//   DialogContent,
//   DialogHeader,
//   DialogTitle,
//   DialogDescription,
//   DialogFooter,
// } from '@/components/ui/dialog';
// import { Button } from '@/components/ui/button';
// import { Input } from '@/components/ui/input';
// import { Label } from '@/components/ui/label';
// import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
// import { Quiz } from '@/types/quiz';
// import { toast } from 'sonner';

// interface EditQuizModalProps {
//   isOpen: boolean;
//   onClose: () => void;
//   onSave: (id: string, title: string, quizType: 'manual' | 'ai_generated') => void;
//   quiz: Quiz;
// }

// export const EditQuizModal: React.FC<EditQuizModalProps> = ({ isOpen, onClose, onSave, quiz }) => {
//   const [title, setTitle] = useState(quiz.title);
//   const [quizType, setQuizType] = useState<'manual' | 'ai_generated'>(quiz.quiz_type);
//   const [isLoading, setIsLoading] = useState(false);

//   useEffect(() => {
//     if (quiz) {
//       setTitle(quiz.title);
//       setQuizType(quiz.quiz_type);
//     }
//   }, [quiz]);

//   const handleSubmit = async () => {
//     if (!title.trim()) {
//       toast.error('Quiz title cannot be empty.');
//       return;
//     }

//     setIsLoading(true);
//     try {
//       await onSave(quiz.id, title, quizType);
//     } catch (error) {
//       // Error handling is done in the parent component (page.tsx)
//       console.error('Error updating quiz:', error);
//     } finally {
//       setIsLoading(false);
//     }
//   };

//   return (
//     <Dialog open={isOpen} onOpenChange={onClose}>
//       <DialogContent className="sm:max-w-[425px]">
//         <DialogHeader>
//           <DialogTitle>Edit Quiz</DialogTitle>
//           <DialogDescription>
//             Make changes to your quiz here. Click save when you're done.
//           </DialogDescription>
//         </DialogHeader>
//         <div className="grid gap-4 py-4">
//           <div className="grid grid-cols-4 items-center gap-4">
//             <Label htmlFor="title" className="text-right">
//               Title
//             </Label>
//             <Input
//               id="title"
//               value={title}
//               onChange={(e) => setTitle(e.target.value)}
//               className="col-span-3"
//               disabled={isLoading}
//             />
//           </div>
//           <div className="grid grid-cols-4 items-center gap-4">
//             <Label className="text-right">
//               Quiz Type
//             </Label>
//             <RadioGroup
//               value={quizType}
//               onValueChange={(value: 'manual' | 'ai_generated') => setQuizType(value)}
//               className="col-span-3 flex space-x-4"
//               disabled={isLoading}
//             >
//               <div className="flex items-center space-x-2">
//                 <RadioGroupItem value="manual" id="manual" />
//                 <Label htmlFor="manual">Manual</Label>
//               </div>
//               <div className="flex items-center space-x-2">
//                 <RadioGroupItem value="ai_generated" id="ai_generated" />
//                 <Label htmlFor="ai_generated">AI Generated</Label>
//               </div>
//             </RadioGroup>
//           </div>
//         </div>
//         <DialogFooter>
//           <Button variant="outline" onClick={onClose} disabled={isLoading}>
//             Cancel
//           </Button>
//           <Button onClick={handleSubmit} disabled={isLoading}>
//             {isLoading ? 'Saving...' : 'Save Changes'}
//           </Button>
//         </DialogFooter>
//       </DialogContent>
//     </Dialog>
//   );
// };