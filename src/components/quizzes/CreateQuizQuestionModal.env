// import React, { useState } from 'react';
// import {
//   Dialog,
//   DialogContent,
//   DialogHeader,
//   DialogTitle,
//   DialogDescription,
//   DialogFooter,
// } from '@/components/ui/dialog';
// import { Button } from '@/components/ui/button';
// import { Input } from '@/components/ui/input';
// import { Label } from '@/components/ui/label';
// import { Textarea } from '@/components/ui/textarea';
// import { toast } from 'sonner';
// import { PlusCircle, XCircle } from 'lucide-react';

// interface CreateQuizQuestionModalProps {
//   isOpen: boolean;
//   onClose: () => void;
//   onCreate: (questionText: string, options: string[], correctAnswer: string) => Promise<void>;
// }

// export const CreateQuizQuestionModal: React.FC<CreateQuizQuestionModalProps> = ({
//   isOpen,
//   onClose,
//   onCreate,
// }) => {
//   const [questionText, setQuestionText] = useState('');
//   const [options, setOptions] = useState<string[]>(['', '']);
//   const [correctAnswer, setCorrectAnswer] = useState('');
//   const [isLoading, setIsLoading] = useState(false);

//   const handleOptionChange = (index: number, value: string) => {
//     const newOptions = [...options];
//     newOptions[index] = value;
//     setOptions(newOptions);
//   };

//   const handleAddOption = () => {
//     setOptions([...options, '']);
//   };

//   const handleRemoveOption = (index: number) => {
//     const newOptions = options.filter((_, i) => i !== index);
//     setOptions(newOptions);
//   };

//   const handleSubmit = async () => {
//     if (!questionText.trim()) {
//       toast.error('Question text cannot be empty.');
//       return;
//     }
//     if (options.some(opt => !opt.trim())) {
//       toast.error('All options must be filled.');
//       return;
//     }
//     if (!correctAnswer.trim()) {
//       toast.error('Correct answer cannot be empty.');
//       return;
//     }
//     if (!options.includes(correctAnswer)) {
//       toast.error('Correct answer must be one of the provided options.');
//       return;
//     }

//     setIsLoading(true);
//     try {
//       await onCreate(questionText, options, correctAnswer);
//       setQuestionText('');
//       setOptions(['', '']);
//       setCorrectAnswer('');
//       onClose();
//     } catch (error) {
//       console.error('Error creating quiz question:', error);
//       toast.error('Failed to create quiz question.');
//     } finally {
//       setIsLoading(false);
//     }
//   };

//   return (
//     <Dialog open={isOpen} onOpenChange={onClose}>
//       <DialogContent className="sm:max-w-[600px]">
//         <DialogHeader>
//           <DialogTitle>Add New Question</DialogTitle>
//           <DialogDescription>
//             Enter the question, provide multiple options, and specify the correct answer.
//           </DialogDescription>
//         </DialogHeader>
//         <div className="grid gap-4 py-4">
//           <div className="grid grid-cols-4 items-center gap-4">
//             <Label htmlFor="questionText" className="text-right">
//               Question
//             </Label>
//             <Textarea
//               id="questionText"
//               value={questionText}
//               onChange={(e) => setQuestionText(e.target.value)}
//               className="col-span-3"
//               disabled={isLoading}
//             />
//           </div>

//           <div className="grid grid-cols-4 items-start gap-4">
//             <Label className="text-right pt-2">Options</Label>
//             <div className="col-span-3 space-y-2">
//               {options.map((option, index) => (
//                 <div key={index} className="flex items-center space-x-2">
//                   <Input
//                     value={option}
//                     onChange={(e) => handleOptionChange(index, e.target.value)}
//                     placeholder={`Option ${index + 1}`}
//                     disabled={isLoading}
//                   />
//                   {options.length > 2 && (
//                     <Button
//                       variant="ghost"
//                       size="icon"
//                       onClick={() => handleRemoveOption(index)}
//                       disabled={isLoading}
//                     >
//                       <XCircle className="h-4 w-4 text-red-500" />
//                     </Button>
//                   )}
//                 </div>
//               ))}
//               <Button
//                 variant="outline"
//                 size="sm"
//                 onClick={handleAddOption}
//                 className="w-full"
//                 disabled={isLoading}
//               >
//                 <PlusCircle className="mr-2 h-4 w-4" />
//                 Add Option
//               </Button>
//             </div>
//           </div>

//           <div className="grid grid-cols-4 items-center gap-4">
//             <Label htmlFor="correctAnswer" className="text-right">
//               Correct Answer
//             </Label>
//             <Input
//               id="correctAnswer"
//               value={correctAnswer}
//               onChange={(e) => setCorrectAnswer(e.target.value)}
//               className="col-span-3"
//               placeholder="Enter the exact correct option"
//               disabled={isLoading}
//             />
//           </div>
//         </div>
//         <DialogFooter>
//           <Button variant="outline" onClick={onClose} disabled={isLoading}>
//             Cancel
//           </Button>
//           <Button onClick={handleSubmit} disabled={isLoading}>
//             {isLoading ? 'Adding...' : 'Add Question'}
//           </Button>
//         </DialogFooter>
//       </DialogContent>
//     </Dialog>
//   );
// };