// import { NextResponse } from 'next/server';
// import { createClient } from '@/lib/supabase/server';
// import { z } from 'zod';

// // Schema for creating a new quiz question
// const createQuizQuestionSchema = z.object({
//   question_text: z.string().min(1, 'Question text is required'),
//   options: z.array(z.string().min(1, 'Option cannot be empty')).min(2, 'At least two options are required'),
//   correct_answer: z.string().min(1, 'Correct answer is required'),
// });

// export async function GET(
//   request: Request,
//   { params }: { params: { quizId: string } }
// ) {
//   const { quizId } = params;
//   const supabase = createClient();

//   const { data: userData, error: userError } = await supabase.auth.getUser();
//   if (userError || !userData?.user) {
//     return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
//   }

//   try {
//     const { data: quizData, error: quizError } = await supabase
//       .from('quizzes')
//       .select('questions')
//       .eq('id', quizId)
//       .eq('user_id', userData.user.id)
//       .single();

//     if (quizError) {
//       console.error('Supabase error fetching quiz questions:', quizError);
//       return NextResponse.json({ error: quizError.message }, { status: 500 });
//     }

//     if (!quizData) {
//       return NextResponse.json({ error: 'Quiz not found' }, { status: 404 });
//     }

//     return NextResponse.json(quizData.questions);
//   } catch (error) {
//     console.error('Error fetching quiz questions:', error);
//     return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
//   }
// }

// export async function POST(
//   request: Request,
//   { params }: { params: { quizId: string } }
// ) {
//   const { quizId } = params;
//   const supabase = createClient();

//   const { data: userData, error: userError } = await supabase.auth.getUser();
//   if (userError || !userData?.user) {
//     return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
//   }

//   try {
//     const body = await request.json();
//     const validatedData = createQuizQuestionSchema.parse(body);

//     // Fetch the existing quiz to append the new question
//     const { data: quizData, error: fetchError } = await supabase
//       .from('quizzes')
//       .select('questions')
//       .eq('id', quizId)
//       .eq('user_id', userData.user.id)
//       .single();

//     if (fetchError) {
//       console.error('Supabase error fetching quiz for question addition:', fetchError);
//       return NextResponse.json({ error: fetchError.message }, { status: 500 });
//     }

//     if (!quizData) {
//       return NextResponse.json({ error: 'Quiz not found' }, { status: 404 });
//     }

//     const currentQuestions = quizData.questions || [];
//     const newQuestion = {
//       id: crypto.randomUUID(), // Generate a unique ID for the new question
//       ...validatedData,
//     };

//     const updatedQuestions = [...currentQuestions, newQuestion];

//     const { data, error: updateError } = await supabase
//       .from('quizzes')
//       .update({ questions: updatedQuestions, updated_at: new Date().toISOString() })
//       .eq('id', quizId)
//       .eq('user_id', userData.user.id)
//       .select('questions')
//       .single();

//     if (updateError) {
//       console.error('Supabase error updating quiz with new question:', updateError);
//       return NextResponse.json({ error: updateError.message }, { status: 500 });
//     }

//     return NextResponse.json(newQuestion, { status: 201 });
//   } catch (error) {
//     if (error instanceof z.ZodError) {
//       return NextResponse.json({ error: error.errors }, { status: 400 });
//     }
//     console.error('Error creating quiz question:', error);
//     return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
//   }
// }