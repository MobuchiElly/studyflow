// import { NextResponse } from 'next/server';
// import { createClient } from '@/lib/supabase/server';
// import { z } from 'zod';
// import { ZodError } from 'zod';
// import { QuizQuestion } from '@/types/quiz';

// // Define a schema for the AI generation request body
// const AIGenerateQuizSchema = z.object({
//   topic: z.string().min(3, 'Topic must be at least 3 characters long.'),
//   num_questions: z.number().int().min(1).max(10, 'Can generate between 1 and 10 questions.'),
//   quiz_id: z.string().uuid('Invalid quiz ID format.'),
// });

// export async function POST(request: Request) {
//   const supabase = createClient();
//   const {
//     data: { user },
//   } = await supabase.auth.getUser();

//   if (!user) {
//     return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
//   }

//   try {
//     const body = await request.json();
//     const { topic, num_questions, quiz_id } = AIGenerateQuizSchema.parse(body);

//     // Placeholder for AI generation logic
//     // In a real application, you would call an external AI service here
//     // For now, we'll generate dummy questions
//     const generatedQuestions: Omit<QuizQuestion, 'id' | 'created_at' | 'updated_at' | 'quiz_id'>[] = [];

//     for (let i = 0; i < num_questions; i++) {
//       generatedQuestions.push({
//         question_text: `AI Generated Question ${i + 1} about ${topic}?`,
//         options: [`Option A for Q${i + 1}`, `Option B for Q${i + 1}`, `Option C for Q${i + 1}`, `Option D for Q${i + 1}`],
//         correct_answer_index: Math.floor(Math.random() * 4), // Random correct answer
//       });
//     }

//     // Insert generated questions into the database
//     const { data, error } = await supabase
//       .from('quiz_questions')
//       .insert(generatedQuestions.map(q => ({ ...q, quiz_id, user_id: user.id })))
//       .select();

//     if (error) {
//       console.error('Supabase insert error:', error);
//       return NextResponse.json({ error: error.message }, { status: 500 });
//     }

//     return NextResponse.json(data, { status: 201 });
//   } catch (error) {
//     if (error instanceof ZodError) {
//       return NextResponse.json({ error: error.errors }, { status: 400 });
//     }
//     console.error('Unexpected error:', error);
//     return NextResponse.json(
//       { error: 'Internal Server Error' },
//       { status: 500 }
//     );
//   }
// }