// import { NextResponse } from 'next/server';
// import { createClient } from '@/lib/supabase/server';
// import { z } from 'zod';

// // Schema for creating a new flashcard
// const flashcardSchema = z.object({
//   question: z.string().min(1, 'Question is required'),
//   answer: z.string().min(1, 'Answer is required'),
// });

// export async function GET(request: Request, { params }: { params: { deckId: string } }) {
//   const supabase = createClient();
//   const { data: { user } } = await supabase.auth.getUser();

//   if (!user) {
//     return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
//   }

//   const { deckId } = params;

//   const { data, error } = await supabase
//     .from('flashcards')
//     .select('*')
//     .eq('deck_id', deckId)
//     .eq('user_id', user.id)
//     .order('created_at', { ascending: true });

//   if (error) {
//     console.error('Error fetching flashcards:', error);
//     return NextResponse.json({ error: error.message }, { status: 500 });
//   }

//   return NextResponse.json(data);
// }

// export async function POST(request: Request, { params }: { params: { deckId: string } }) {
//   const supabase = createClient();
//   const { data: { user } } = await supabase.auth.getUser();

//   if (!user) {
//     return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
//   }

//   const { deckId } = params;

//   try {
//     const body = await request.json();
//     const validatedData = flashcardSchema.parse(body);

//     const { data, error } = await supabase
//       .from('flashcards')
//       .insert({
//         ...validatedData,
//         user_id: user.id,
//         deck_id: deckId,
//       })
//       .select()
//       .single();

//     if (error) {
//       console.error('Error creating flashcard:', error);
//       return NextResponse.json({ error: error.message }, { status: 500 });
//     }

//     return NextResponse.json(data, { status: 201 });
//   } catch (error) {
//     if (error instanceof z.ZodError) {
//       return NextResponse.json({ error: error.errors }, { status: 400 });
//     }
//     console.error('Unexpected error creating flashcard:', error);
//     return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });
//   }
// }