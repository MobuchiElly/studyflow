// 'use client';

// import React, { useEffect, useState, useCallback } from 'react';
// import { useParams, useRouter } from 'next/navigation';
// import axios from 'axios';
// import { Quiz, QuizQuestion, UserAnswer } from '@/types/quiz';
// import { toast } from 'sonner';
// import { Button } from '@/components/ui/button';
// import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
// import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
// import { Label } from '@/components/ui/label';
// import { ArrowLeft, CheckCircle2, XCircle } from 'lucide-react';

// const TakeQuizPage: React.FC = () => {
//   const params = useParams();
//   const router = useRouter();
//   const quizId = params.quizId as string;

//   const [quiz, setQuiz] = useState<Quiz | null>(null);
//   const [questions, setQuestions] = useState<QuizQuestion[]>([]);
//   const [loading, setLoading] = useState(true);
//   const [error, setError] = useState<string | null>(null);
//   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
//   const [userAnswers, setUserAnswers] = useState<UserAnswer[]>([]);
//   const [quizCompleted, setQuizCompleted] = useState(false);
//   const [score, setScore] = useState(0);
//   const [isSubmitting, setIsSubmitting] = useState(false);

//   const fetchQuizData = useCallback(async () => {
//     if (!quizId) return;
//     setLoading(true);
//     setError(null);
//     try {
//       const quizResponse = await axios.get(`/api/quizzes/${quizId}`);
//       setQuiz(quizResponse.data);

//       const questionsResponse = await axios.get(`/api/quizzes/${quizId}/questions`);
//       setQuestions(questionsResponse.data);
//       setUserAnswers(
//         questionsResponse.data.map((q: QuizQuestion) => ({
//           question_id: q.id,
//           selected_option_index: null,
//           is_correct: false,
//         }))
//       );
//     } catch (err) {
//       console.error('Failed to fetch quiz data:', err);
//       setError('Failed to load quiz data.');
//       toast.error('Failed to load quiz data.');
//     } finally {
//       setLoading(false);
//     }
//   }, [quizId]);

//   useEffect(() => {
//     fetchQuizData();
//   }, [fetchQuizData]);

//   const handleAnswerSelect = (questionId: string, selectedOptionIndex: number) => {
//     setUserAnswers((prev) =>
//       prev.map((answer) =>
//         answer.question_id === questionId
//           ? { ...answer, selected_option_index: selectedOptionIndex }
//           : answer
//       )
//     );
//   };

//   const goToNextQuestion = () => {
//     if (currentQuestionIndex < questions.length - 1) {
//       setCurrentQuestionIndex((prev) => prev + 1);
//     }
//   };

//   const goToPreviousQuestion = () => {
//     if (currentQuestionIndex > 0) {
//       setCurrentQuestionIndex((prev) => prev - 1);
//     }
//   };

//   const handleSubmitQuiz = async () => {
//     setIsSubmitting(true);
//     let correctCount = 0;
//     const answersWithCorrection = userAnswers.map((answer) => {
//       const question = questions.find((q) => q.id === answer.question_id);
//       const isCorrect = question?.correct_answer_index === answer.selected_option_index;
//       if (isCorrect) {
//         correctCount++;
//       }
//       return { ...answer, is_correct: isCorrect };
//     });

//     setScore(correctCount);

//     try {
//       await axios.post(`/api/quizzes/${quizId}/results`, {
//         quiz_id: quizId,
//         score: correctCount,
//         total_questions: questions.length,
//         answers: answersWithCorrection,
//       });
//       toast.success('Quiz submitted successfully!');
//       setQuizCompleted(true);
//     } catch (err) {
//       console.error('Failed to submit quiz:', err);
//       toast.error('Failed to submit quiz.');
//     } finally {
//       setIsSubmitting(false);
//     }
//   };

//   if (loading) {
//     return <div className="container mx-auto p-4">Loading quiz...</div>;
//   }

//   if (error) {
//     return <div className="container mx-auto p-4 text-red-500">{error}</div>;
//   }

//   if (!quiz || questions.length === 0) {
//     return <div className="container mx-auto p-4">Quiz not found or no questions available.</div>;
//   }

//   const currentQuestion = questions[currentQuestionIndex];
//   const selectedAnswerForCurrentQuestion = userAnswers.find(
//     (answer) => answer.question_id === currentQuestion.id
//   )?.selected_option_index;

//   if (quizCompleted) {
//     return (
//       <div className="container mx-auto p-4">
//         <div className="flex items-center justify-between mb-6">
//           <Button variant="outline" onClick={() => router.push('/dashboard/quizzes')}>
//             <ArrowLeft className="mr-2 h-4 w-4" /> Back to Quizzes
//           </Button>
//           <h1 className="text-3xl font-bold">Quiz Completed!</h1>
//           <div></div> {/* Placeholder for alignment */}
//         </div>

//         <Card className="mb-6">
//           <CardHeader>
//             <CardTitle>Your Results for "{quiz.title}"</CardTitle>
//           </CardHeader>
//           <CardContent>
//             <p className="text-2xl font-semibold mb-4">
//               You scored {score} out of {questions.length}!
//             </p>
//             <h3 className="text-xl font-semibold mb-2">Review your answers:</h3>
//             <div className="grid gap-4">
//               {questions.map((q, index) => {
//                 const userAnswer = userAnswers.find((ans) => ans.question_id === q.id);
//                 const isCorrect = userAnswer?.is_correct;
//                 return (
//                   <Card key={q.id} className={isCorrect ? 'border-green-500' : 'border-red-500'}>
//                     <CardHeader>
//                       <CardTitle className="text-lg">
//                         {index + 1}. {q.question_text}
//                       </CardTitle>
//                     </CardHeader>
//                     <CardContent>
//                       <ul className="list-disc pl-5">
//                         {q.options.map((option, optIndex) => (
//                           <li
//                             key={optIndex}
//                             className={`${
//                               optIndex === q.correct_answer_index
//                                 ? 'font-bold text-green-600'
//                                 : ''
//                             } ${
//                               userAnswer?.selected_option_index === optIndex && !isCorrect
//                                 ? 'text-red-600 line-through'
//                                 : ''
//                             }`}
//                           >
//                             {option}
//                             {optIndex === q.correct_answer_index && (
//                               <span className="ml-2">(Correct Answer)</span>
//                             )}
//                             {userAnswer?.selected_option_index === optIndex && !isCorrect && (
//                               <span className="ml-2">(Your Answer)</span>
//                             )}
//                           </li>
//                         ))}
//                       </ul>
//                     </CardContent>
//                     <CardFooter>
//                       {isCorrect ? (
//                         <span className="flex items-center text-green-600">
//                           <CheckCircle2 className="mr-1 h-4 w-4" /> Correct
//                         </span>
//                       ) : (
//                         <span className="flex items-center text-red-600">
//                           <XCircle className="mr-1 h-4 w-4" /> Incorrect
//                         </span>
//                       )}
//                     </CardFooter>
//                   </Card>
//                 );
//               })}
//             </div>
//           </CardContent>
//         </Card>
//       </div>
//     );
//   }

//   return (
//     <div className="container mx-auto p-4">
//       <div className="flex items-center justify-between mb-6">
//         <Button variant="outline" onClick={() => router.push('/dashboard/quizzes')}>
//           <ArrowLeft className="mr-2 h-4 w-4" /> Back to Quizzes
//         </Button>
//         <h1 className="text-3xl font-bold">Take Quiz: {quiz.title}</h1>
//         <div></div> {/* Placeholder for alignment */}
//       </div>

//       <Card>
//         <CardHeader>
//           <CardTitle>
//             Question {currentQuestionIndex + 1} of {questions.length}
//           </CardTitle>
//         </CardHeader>
//         <CardContent>
//           <p className="text-lg mb-4">{currentQuestion.question_text}</p>
//           <RadioGroup
//             value={selectedAnswerForCurrentQuestion !== null ? selectedAnswerForCurrentQuestion.toString() : undefined}
//             onValueChange={(value) => handleAnswerSelect(currentQuestion.id, parseInt(value))}
//           >
//             {currentQuestion.options.map((option, index) => (
//               <div key={index} className="flex items-center space-x-2 mb-2">
//                 <RadioGroupItem value={index.toString()} id={`option-${index}`} />
//                 <Label htmlFor={`option-${index}`}>{option}</Label>
//               </div>
//             ))}
//           </RadioGroup>
//         </CardContent>
//         <CardFooter className="flex justify-between">
//           <Button onClick={goToPreviousQuestion} disabled={currentQuestionIndex === 0}>
//             Previous
//           </Button>
//           {currentQuestionIndex === questions.length - 1 ? (
//             <Button onClick={handleSubmitQuiz} disabled={isSubmitting || selectedAnswerForCurrentQuestion === undefined}>
//               {isSubmitting ? 'Submitting...' : 'Submit Quiz'}
//             </Button>
//           ) : (
//             <Button onClick={goToNextQuestion} disabled={selectedAnswerForCurrentQuestion === undefined}>
//               Next
//             </Button>
//           )}
//         </CardFooter>
//       </Card>
//     </div>
//   );
// };

// export default TakeQuizPage;