// 'use client';

// import React, { useEffect, useState, useCallback } from 'react';
// import { useParams, useRouter } from 'next/navigation';
// import axios from 'axios';
// import { Quiz, QuizQuestion } from '@/types/quiz';
// import { toast } from 'sonner';
// import { Button } from '@/components/ui/button';
// import { ArrowLeft, PlusCircle, Edit, Trash2 } from 'lucide-react';
// import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
// import CreateQuizQuestionModal from '@/components/quizzes/CreateQuizQuestionModal';
// import EditQuizQuestionModal from '@/components/quizzes/EditQuizQuestionModal';
// import DeleteQuizQuestionDialog from '@/components/quizzes/DeleteQuizQuestionDialog';
// import Link from 'next/link';

// const SingleQuizPage: React.FC = () => {
//   const params = useParams();
//   const router = useRouter();
//   const quizId = params.quizId as string;

//   const [quiz, setQuiz] = useState<Quiz | null>(null);
//   const [questions, setQuestions] = useState<QuizQuestion[]>([]);
//   const [loading, setLoading] = useState(true);
//   const [error, setError] = useState<string | null>(null);

//   const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
//   const [isEditModalOpen, setIsEditModalOpen] = useState(false);
//   const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
//   const [selectedQuestion, setSelectedQuestion] = useState<QuizQuestion | null>(null);

//   const fetchQuizAndQuestions = useCallback(async () => {
//     if (!quizId) return;
//     setLoading(true);
//     setError(null);
//     try {
//       const quizResponse = await axios.get(`/api/quizzes/${quizId}`);
//       setQuiz(quizResponse.data);

//       const questionsResponse = await axios.get(`/api/quizzes/${quizId}/questions`);
//       setQuestions(questionsResponse.data);
//     } catch (err) {
//       console.error('Failed to fetch quiz or questions:', err);
//       setError('Failed to load quiz details or questions.');
//       toast.error('Failed to load quiz details or questions.');
//     } finally {
//       setLoading(false);
//     }
//   }, [quizId]);

//   useEffect(() => {
//     fetchQuizAndQuestions();
//   }, [fetchQuizAndQuestions]);

//   const handleCreateQuestion = async (newQuestion: Omit<QuizQuestion, 'id' | 'created_at' | 'updated_at' | 'quiz_id'>) => {
//     try {
//       const response = await axios.post(`/api/quizzes/${quizId}/questions`, newQuestion);
//       setQuestions((prev) => [...prev, response.data]);
//       toast.success('Question created successfully!');
//       setIsCreateModalOpen(false);
//     } catch (err) {
//       console.error('Failed to create question:', err);
//       toast.error('Failed to create question.');
//     }
//   };

//   const handleEditQuestion = async (updatedQuestion: QuizQuestion) => {
//     try {
//       const response = await axios.put(`/api/quizzes/${quizId}/questions/${updatedQuestion.id}`, updatedQuestion);
//       setQuestions((prev) =>
//         prev.map((q) => (q.id === updatedQuestion.id ? response.data : q))
//       );
//       toast.success('Question updated successfully!');
//       setIsEditModalOpen(false);
//       setSelectedQuestion(null);
//     } catch (err) {
//       console.error('Failed to update question:', err);
//       toast.error('Failed to update question.');
//     }
//   };

//   const handleDeleteQuestion = async () => {
//     if (!selectedQuestion) return;
//     try {
//       await axios.delete(`/api/quizzes/${quizId}/questions/${selectedQuestion.id}`);
//       setQuestions((prev) => prev.filter((q) => q.id !== selectedQuestion.id));
//       toast.success('Question deleted successfully!');
//       setIsDeleteDialogOpen(false);
//       setSelectedQuestion(null);
//     } catch (err) {
//       console.error('Failed to delete question:', err);
//       toast.error('Failed to delete question.');
//     }
//   };

//   if (loading) {
//     return <div className="container mx-auto p-4">Loading quiz...</div>;
//   }

//   if (error) {
//     return <div className="container mx-auto p-4 text-red-500">{error}</div>;
//   }

//   if (!quiz) {
//     return <div className="container mx-auto p-4">Quiz not found.</div>;
//   }

//   return (
//     <div className="container mx-auto p-4">
//       <div className="flex items-center justify-between mb-6">
//         <Button variant="outline" onClick={() => router.back()}>
//           <ArrowLeft className="mr-2 h-4 w-4" /> Back to Quizzes
//         </Button>
//         <h1 className="text-3xl font-bold">{quiz.title}</h1>
//         <div>
//           <Button onClick={() => setIsCreateModalOpen(true)}>
//             <PlusCircle className="mr-2 h-4 w-4" /> Add Question
//           </Button>
//           {/* TODO: Add "Start Quiz" button functionality */}
//           <Button className="ml-2">Start Quiz</Button>
//         </div>
//       </div>

//       <Card className="mb-6">
//         <CardHeader>
//           <CardTitle>Quiz Details</CardTitle>
//         </CardHeader>
//         <CardContent>
//           <p>
//             <strong>Type:</strong> {quiz.quiz_type}
//           </p>
//           <p>
//             <strong>Created At:</strong> {new Date(quiz.created_at).toLocaleDateString()}
//           </p>
//           <p>
//             <strong>Last Updated:</strong> {new Date(quiz.updated_at).toLocaleDateString()}
//           </p>
//         </CardContent>
//       </Card>

//       <h2 className="text-2xl font-semibold mb-4">Questions</h2>
//       {questions.length === 0 ? (
//         <p>No questions yet. Click "Add Question" to get started!</p>
//       ) : (
//         <div className="grid gap-4">
//           {questions.map((question, index) => (
//             <Card key={question.id}>
//               <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
//                 <CardTitle className="text-lg font-medium">
//                   Question {index + 1}: {question.question_text}
//                 </CardTitle>
//                 <div className="flex space-x-2">
//                   <Button
//                     variant="outline"
//                     size="sm"
//                     onClick={() => {
//                       setSelectedQuestion(question);
//                       setIsEditModalOpen(true);
//                     }}
//                   >
//                     <Edit className="h-4 w-4" />
//                   </Button>
//                   <Button
//                     variant="destructive"
//                     size="sm"
//                     onClick={() => {
//                       setSelectedQuestion(question);
//                       setIsDeleteDialogOpen(true);
//                     }}
//                   >
//                     <Trash2 className="h-4 w-4" />
//                   </Button>
//                 </div>
//               </CardHeader>
//               <CardContent>
//                 <ul className="list-disc pl-5">
//                   {question.options.map((option, optIndex) => (
//                     <li
//                       key={optIndex}
//                       className={
//                         optIndex === question.correct_answer_index ? 'font-bold text-green-600' : ''
//                       }
//                     >
//                       {option}
//                       {optIndex === question.correct_answer_index && ' (Correct Answer)'}
//                     </li>
//                   ))}
//                 </ul>
//               </CardContent>
//             </Card>
//           ))}
//         </div>
//       )}

//       <CreateQuizQuestionModal
//         isOpen={isCreateModalOpen}
//         onClose={() => setIsCreateModalOpen(false)}
//         onSave={handleCreateQuestion}
//         quizId={quizId}
//       />

//       {selectedQuestion && (
//         <EditQuizQuestionModal
//           isOpen={isEditModalOpen}
//           onClose={() => {
//             setIsEditModalOpen(false);
//             setSelectedQuestion(null);
//           }}
//           onSave={handleEditQuestion}
//           questionToEdit={selectedQuestion}
//           quizId={quizId}
//         />
//       )}

//       {selectedQuestion && (
//         <DeleteQuizQuestionDialog
//           isOpen={isDeleteDialogOpen}
//           onClose={() => {
//             setIsDeleteDialogOpen(false);
//             setSelectedQuestion(null);
//           }}
//           onConfirm={handleDeleteQuestion}
//           isDeleting={false} // You might want to add a loading state for deletion
//           questionText={selectedQuestion.question_text}
//         />
//       )}
//     </div>
//   );
// };

// export default SingleQuizPage;