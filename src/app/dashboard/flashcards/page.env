// 'use client';

// import React, { useState, useEffect, useCallback } from 'react';
// import FlashcardDeckHeader from '@/components/flashcards/FlashcardDeckHeader';
// import FlashcardDeckList from '@/components/flashcards/FlashcardDeckList';
// import CreateFlashcardDeckModal from '@/components/flashcards/CreateFlashcardDeckModal';
// import EditFlashcardDeckModal from '@/components/flashcards/EditFlashcardDeckModal';
// import { FlashcardDeck } from '@/types/flashcard';
// import axios from 'axios';
// import { toast } from 'sonner';

// export default function FlashcardsPage() {
//   const [decks, setDecks] = useState<FlashcardDeck[]>([]);
//   const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
//   const [isEditModalOpen, setIsEditModalOpen] = useState(false);
//   const [deckToEdit, setDeckToEdit] = useState<FlashcardDeck | null>(null);
//   const [isCreating, setIsCreating] = useState(false);
//   const [isSaving, setIsSaving] = useState(false);
//   const [isDeleting, setIsDeleting] = useState<string | null>(null); // Stores the ID of the deck being deleted

//   const fetchDecks = useCallback(async () => {
//     try {
//       const response = await axios.get('/api/flashcards');
//       setDecks(response.data);
//     } catch (error) {
//       console.error('Error fetching flashcard decks:', error);
//       toast.error('Failed to load flashcard decks.');
//     }
//   }, []);

//   useEffect(() => {
//     fetchDecks();
//   }, [fetchDecks]);

//   const handleCreateDeck = async (title: string, description: string) => {
//     setIsCreating(true);
//     try {
//       const response = await axios.post('/api/flashcards', { title, description });
//       setDecks((prev) => [...prev, response.data]);
//       toast.success('Flashcard deck created successfully!');
//       setIsCreateModalOpen(false);
//     } catch (error) {
//       console.error('Error creating flashcard deck:', error);
//       toast.error('Failed to create flashcard deck.');
//     } finally {
//       setIsCreating(false);
//     }
//   };

//   const handleEditDeck = (deck: FlashcardDeck) => {
//     setDeckToEdit(deck);
//     setIsEditModalOpen(true);
//   };

//   const handleSaveDeck = async (id: string, title: string, description: string) => {
//     setIsSaving(true);
//     try {
//       const response = await axios.put(`/api/flashcards/${id}`, { title, description });
//       setDecks((prev) => prev.map((deck) => (deck.id === id ? response.data : deck)));
//       toast.success('Flashcard deck updated successfully!');
//       setIsEditModalOpen(false);
//       setDeckToEdit(null);
//     } catch (error) {
//       console.error('Error saving flashcard deck:', error);
//       toast.error('Failed to update flashcard deck.');
//     } finally {
//       setIsSaving(false);
//     }
//   };

//   const handleDeleteDeck = async (id: string) => {
//     setIsDeleting(id);
//     try {
//       await axios.delete(`/api/flashcards/${id}`);
//       setDecks((prev) => prev.filter((deck) => deck.id !== id));
//       toast.success('Flashcard deck deleted successfully!');
//     } catch (error) {
//       console.error('Error deleting flashcard deck:', error);
//       toast.error('Failed to delete flashcard deck.');
//     } finally {
//       setIsDeleting(null);
//     }
//   };

//   return (
//     <div className="container mx-auto py-8">
//       <FlashcardDeckHeader onOpenCreateModal={() => setIsCreateModalOpen(true)} />
//       <FlashcardDeckList
//         flashcardDecks={decks} // Changed 'decks' to 'flashcardDecks' to match prop name
//         onEdit={handleEditDeck}
//         onDelete={handleDeleteDeck}
//         isLoading={false} // Assuming loading state is managed by the page itself
//       />

//       <CreateFlashcardDeckModal
//         isOpen={isCreateModalOpen}
//         onClose={() => setIsCreateModalOpen(false)}
//         onCreate={handleCreateDeck}
//         isCreating={isCreating}
//       />

//       {deckToEdit && (
//         <EditFlashcardDeckModal
//           isOpen={isEditModalOpen}
//           onClose={() => {
//             setIsEditModalOpen(false);
//             setDeckToEdit(null);
//           }}
//           deckToEdit={deckToEdit}
//           onSave={handleSaveDeck}
//           isSaving={isSaving}
//         />
//       )}
//     </div>
//   );
// }