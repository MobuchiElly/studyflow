// 'use client';

// import React, { useState, useEffect, useCallback } from 'react';
// import { useParams, useRouter } from 'next/navigation';
// import axios from 'axios';
// import { toast } from 'sonner';
// import { Flashcard, FlashcardDeck } from '@/types/flashcard';
// import { Button } from '@/components/ui/button';
// import { PlusCircle, Loader2 } from 'lucide-react';
// import FlashcardList from '@/components/flashcards/FlashcardList';
// import CreateFlashcardModal from '@/components/flashcards/CreateFlashcardModal';
// import EditFlashcardModal from '@/components/flashcards/EditFlashcardModal';
// import DeleteFlashcardDialog from '@/components/flashcards/DeleteFlashcardDialog';

// const FlashcardDeckPage: React.FC = () => {
//   const { deckId } = useParams<{ deckId: string }>();
//   const router = useRouter();

//   const [deck, setDeck] = useState<FlashcardDeck | null>(null);
//   const [flashcards, setFlashcards] = useState<Flashcard[]>([]);
//   const [loading, setLoading] = useState(true);
//   const [error, setError] = useState<string | null>(null);

//   const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
//   const [isEditModalOpen, setIsEditModalOpen] = useState(false);
//   const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
//   const [selectedFlashcard, setSelectedFlashcard] = useState<Flashcard | null>(null);

//   const [isSaving, setIsSaving] = useState(false);
//   const [isDeleting, setIsDeleting] = useState(false);

//   const fetchFlashcards = useCallback(async () => {
//     if (!deckId) return;
//     setLoading(true);
//     setError(null);
//     try {
//       const response = await axios.get(`/api/flashcards/${deckId}/cards`);
//       setFlashcards(response.data);
//     } catch (err) {
//       console.error('Failed to fetch flashcards:', err);
//       setError('Failed to load flashcards.');
//       toast.error('Failed to load flashcards.');
//     } finally {
//       setLoading(false);
//     }
//   }, [deckId]);

//   const fetchDeckDetails = useCallback(async () => {
//     if (!deckId) return;
//     try {
//       const response = await axios.get(`/api/flashcards/${deckId}`);
//       setDeck(response.data);
//     } catch (err) {
//       console.error('Failed to fetch deck details:', err);
//       toast.error('Failed to load deck details.');
//       router.push('/dashboard/flashcards'); // Redirect if deck not found or error
//     }
//   }, [deckId, router]);

//   useEffect(() => {
//     fetchDeckDetails();
//     fetchFlashcards();
//   }, [fetchDeckDetails, fetchFlashcards]);

//   const handleCreateFlashcard = async (question: string, answer: string) => {
//     setIsSaving(true);
//     try {
//       const response = await axios.post(`/api/flashcards/${deckId}/cards`, { question, answer });
//       setFlashcards((prev) => [...prev, response.data]);
//       toast.success('Flashcard created successfully!');
//       setIsCreateModalOpen(false);
//     } catch (err) {
//       console.error('Failed to create flashcard:', err);
//       toast.error('Failed to create flashcard.');
//     } finally {
//       setIsSaving(false);
//     }
//   };

//   const handleEditFlashcard = async (id: string, question: string, answer: string) => {
//     setIsSaving(true);
//     try {
//       const response = await axios.put(`/api/flashcards/${deckId}/cards/${id}`, { question, answer });
//       setFlashcards((prev) =>
//         prev.map((card) => (card.id === id ? response.data : card))
//       );
//       toast.success('Flashcard updated successfully!');
//       setIsEditModalOpen(false);
//       setSelectedFlashcard(null);
//     } catch (err) {
//       console.error('Failed to update flashcard:', err);
//       toast.error('Failed to update flashcard.');
//     } finally {
//       setIsSaving(false);
//     }
//   };

//   const handleDeleteFlashcard = async () => {
//     if (!selectedFlashcard) return;
//     setIsDeleting(true);
//     try {
//       await axios.delete(`/api/flashcards/${deckId}/cards/${selectedFlashcard.id}`);
//       setFlashcards((prev) => prev.filter((card) => card.id !== selectedFlashcard.id));
//       toast.success('Flashcard deleted successfully!');
//       setIsDeleteDialogOpen(false);
//       setSelectedFlashcard(null);
//     } catch (err) {
//       console.error('Failed to delete flashcard:', err);
//       toast.error('Failed to delete flashcard.');
//     } finally {
//       setIsDeleting(false);
//     }
//   };

//   const openEditModal = (flashcard: Flashcard) => {
//     setSelectedFlashcard(flashcard);
//     setIsEditModalOpen(true);
//   };

//   const openDeleteDialog = (flashcard: Flashcard) => {
//     setSelectedFlashcard(flashcard);
//     setIsDeleteDialogOpen(true);
//   };

//   if (loading && !deck && !error) {
//     return (
//       <div className="flex justify-center items-center h-full">
//         <Loader2 className="h-8 w-8 animate-spin" />
//       </div>
//     );
//   }

//   if (error) {
//     return (
//       <div className="flex flex-col items-center justify-center h-full text-red-500">
//         <p>{error}</p>
//         <Button onClick={() => router.push('/dashboard/flashcards')} className="mt-4">
//           Go back to decks
//         </Button>
//       </div>
//     );
//   }

//   if (!deck) {
//     return (
//       <div className="flex flex-col items-center justify-center h-full">
//         <p>Deck not found.</p>
//         <Button onClick={() => router.push('/dashboard/flashcards')} className="mt-4">
//           Go back to decks
//         </Button>
//       </div>
//     );
//   }

//   return (
//     <div className="container mx-auto py-8">
//       <div className="flex justify-between items-center mb-6">
//         <div>
//           <h1 className="text-3xl font-bold">{deck.title}</h1>
//           <p className="text-gray-600">{deck.description}</p>
//         </div>
//         <Button onClick={() => setIsCreateModalOpen(true)}>
//           <PlusCircle className="mr-2 h-4 w-4" /> Add Flashcard
//         </Button>
//       </div>

//       <FlashcardList
//         flashcards={flashcards}
//         onEdit={openEditModal}
//         onDelete={openDeleteDialog}
//         isLoading={loading}
//       />

//       <CreateFlashcardModal
//         isOpen={isCreateModalOpen}
//         onClose={() => setIsCreateModalOpen(false)}
//         onSave={handleCreateFlashcard}
//         isSaving={isSaving}
//       />

//       <EditFlashcardModal
//         isOpen={isEditModalOpen}
//         onClose={() => setIsEditModalOpen(false)}
//         flashcardToEdit={selectedFlashcard}
//         onSave={handleEditFlashcard}
//         isSaving={isSaving}
//       />

//       <DeleteFlashcardDialog
//         isOpen={isDeleteDialogOpen}
//         onClose={() => setIsDeleteDialogOpen(false)}
//         onConfirm={handleDeleteFlashcard}
//         isDeleting={isDeleting}
//       />
//     </div>
//   );
// };

// export default FlashcardDeckPage;